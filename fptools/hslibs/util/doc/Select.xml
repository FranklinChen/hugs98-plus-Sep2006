<sect1 id="Select">
  <title><literal>Select</literal>: Synchronous I/O multiplexing
<indexterm><primary>Select interface</primary></indexterm>
</title>

  <para>
The <literal>Select</literal> interface provides a Haskell wrapper for the <function>select()</function>
OS call supplied by many modern UNIX variants. <literal>Select</literal> exports the
following:
</para>

<para>

<programlisting>
type TimeOut = Maybe Int
  -- Nothing =&#62; wait indefinitely.
  -- Just x | x &#62;= 0    =&#62; block waiting for 'x' micro seconds.
  --        | otherwise =&#62; block waiting for '-x' micro seconds.

hSelect :: [Handle]
        -&#62; [Handle]
        -&#62; [Handle]
        -&#62; TimeOut
        -&#62; IO SelectResult

type SelectResult
 = ( [Handle]  -- input  handles ready
   , [Handle]  -- output handles ready
   , [Handle]  -- exc.   handles ready
   )
</programlisting>

</para>

<para>
Here's an example of how it could be used:
</para>

<para>

<programlisting>
module Main(main) where

import Select
import IO

main :: IO ()
main = do
  hSetBuffering stdin NoBuffering
  putStrLn "waiting for input to appear"
  hSelect [stdin] [] [] Nothing
  putStrLn "input ready, let's try reading"
  x &#60;- getChar
  print x
</programlisting>

</para>

<para>
where the call to <function>hSelect</function> makes the process go to sleep
until there's input available on <varname>stdin</varname>.
</para>

  <sect2>
    <title>Using <literal>hSelect</literal> with Concurrent
    Haskell</title>
    
    <para>In brief: don't.  For two reasons:</para>

    <itemizedlist>
      <listitem>
	<para><literal>hSelect</literal> will cause all your Haskell
	threads to block until the <literal>hSelect</literal> returns,
	much like any call to a foreign function.</para>
      </listitem>

      <listitem>
	<para>You don't need to.  Concurrent Haskell will let you do
	I/O on multiple file handles concurrently by forking threads,
	and if you need to assign a timeout, then this can be done
	using a combination of <literal>threadDelay</literal> and
	asynchronous exceptions.</para>
      </listitem>
    </itemizedlist>
  </sect2>

</sect1>

<!-- Emacs stuff:
     ;;; Local Variables: ***
     ;;; mode:.xml ***
     ;;;.xml-parent-document: ("../../doc/hslibs.xml" "book" "chapter" "sect1") ***
     ;;; End: ***
 -->
